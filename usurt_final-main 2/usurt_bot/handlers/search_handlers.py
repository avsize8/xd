import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from database import Database
from key_boards.main_menu import (
    get_profile_keyboard,
    get_search_keyboard,
    send_like_notification,
    send_match_notification,
)

logger = logging.getLogger(__name__)


def setup_search_handlers(router: Router, db: Database):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç"""

    def has_profile(user_id: int) -> bool:
        return db.get_profile(user_id) is not None

    @router.message(F.text == "–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã")
    async def find_profiles(message: Message):
        if not has_profile(message.from_user.id):
            await message.answer(
                "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö."
            )
            return
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:", reply_markup=get_search_keyboard()
        )

    @router.message(F.text.in_(["–¢–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω—ã", "–¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã", "–í—Å–µ –∞–Ω–∫–µ—Ç—ã"]))
    async def search_profiles(message: Message):
        if not has_profile(message.from_user.id):
            await message.answer(
                "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö."
            )
            return

        try:
            if message.text == "–¢–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω—ã":
                profiles = db.get_profiles_by_gender(message.from_user.id, "–∂–µ–Ω—Å–∫–∏–π")
            elif message.text == "–¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã":
                profiles = db.get_profiles_by_gender(message.from_user.id, "–º—É–∂—Å–∫–æ–π")
            else:
                profiles = db.get_all_profiles(message.from_user.id)

            if not profiles:
                await message.answer("üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
                return

            await show_profile(message, profiles, 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç.")

    async def show_profile(message: Message, profiles: list, index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if index >= len(profiles):
            await message.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return

        profile = profiles[index]
        profile_text = (
            "üëÄ –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"–ò–º—è: {profile['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"–ü–æ–ª: {profile['gender'].capitalize()}\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {profile['faculty']}\n"
            f"–ö—É—Ä—Å: {profile['course']}\n"
            f"–û —Å–µ–±–µ: {profile['bio']}"
        )

        try:
            if profile.get("photo_id"):
                await message.answer_photo(
                    photo=profile["photo_id"],
                    caption=profile_text,
                    reply_markup=get_profile_keyboard(profile["user_id"], index),
                )
            else:
                await message.answer(
                    profile_text,
                    reply_markup=get_profile_keyboard(profile["user_id"], index),
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã.")

    @router.callback_query(F.data.startswith("like_"))
    async def process_like(callback: CallbackQuery):
        try:
            target_user_id = int(callback.data.split('_')[1])
            from_user_id = callback.from_user.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ª–∞–π–∫–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Å–µ–±—è
            if from_user_id == target_user_id:
                await callback.answer("ü§î –ù–µ–ª—å–∑—è –ª–∞–π–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
                return
            db.add_like(from_user_id, target_user_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            likes_back = False
            cursor = db.conn.cursor()
            cursor.execute('SELECT 1 FROM likes WHERE from_user_id = ? AND to_user_id = ?', (target_user_id, from_user_id))
            if cursor.fetchone():
                likes_back = True
            if likes_back:
                await send_match_notification(callback.bot, from_user_id, target_user_id)
                await callback.answer("üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –º–∞—Ç—á!", show_alert=True)
            else:
                await send_like_notification(callback.bot, from_user_id, target_user_id)
                await callback.answer("üíñ –¢–≤–æ–π –ª–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞.", show_alert=True)

    @router.callback_query(F.data.startswith("next_"))
    async def next_profile(callback: CallbackQuery):
        try:
            await callback.message.delete()
            index = int(callback.data.split("_")[1])

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞)
            profiles = db.get_all_profiles(callback.from_user.id)

            if index >= len(profiles):
                await callback.message.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
                return

            await show_profile(callback.message, profiles, index)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ.", show_alert=True
            )

    @router.callback_query(F.data.startswith("complain_"))
    async def process_complaint(callback: CallbackQuery):
        from_user_id = callback.from_user.id
        to_user_id = int(callback.data.split('_')[1])
        if from_user_id == to_user_id:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è!", show_alert=True)
            return
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã, –ø–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã
        db.add_complaint(from_user_id, to_user_id)
        complaints_count = db.get_complaints_count(to_user_id)
        # –õ–∏–º–∏—Ç –∂–∞–ª–æ–± –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        COMPLAINTS_LIMIT = 3
        if complaints_count >= COMPLAINTS_LIMIT:
            db.block_user(to_user_id)
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∂–∞–ª–æ–±.", show_alert=True)
        else:
            await callback.answer(f"–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ñ–∞–ª–æ–± –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {complaints_count}", show_alert=True)
