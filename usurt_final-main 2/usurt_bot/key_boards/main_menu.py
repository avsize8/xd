import logging

from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.types import (
    BotCommand,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from database import Database

db = Database()


async def set_main_menu(bot: Bot):
    main_menu = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(main_menu)


def get_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    buttons = [
        "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
        "–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã",
        "–ú–æ—è –∞–Ω–∫–µ—Ç–∞",
        "–ú–æ–∏ –º–∞—Ç—á–∏",
        "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    ]
    builder.add(*[KeyboardButton(text=btn) for btn in buttons])
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_gender_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)


def get_search_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="–¢–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω—ã"),
        KeyboardButton(text="–¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã"),
        KeyboardButton(text="–í—Å–µ –∞–Ω–∫–µ—Ç—ã"),
    )
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_profile_keyboard(profile_user_id: int, index: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚ù§Ô∏è –õ–∞–π–∫",
            callback_data=f"like_{profile_user_id}"
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"next_{index+1}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üö´ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è",
            callback_data=f"complain_{profile_user_id}"
        )
    )
    return builder.as_markup()


async def send_like_notification(bot: Bot, from_user_id: int, to_user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ"""
    from_profile = db.get_profile(from_user_id)
    if not from_profile:
        return

    try:
        user_link = f'<a href="tg://user?id={from_user_id}">{from_profile["name"]}</a>'
        caption = (
            f"üíå –¢–µ–±–µ –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –ª–∞–π–∫ {user_link}!\n\n"
            f"–ê–Ω–∫–µ—Ç–∞: {from_profile['name']}\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {from_profile['faculty']}\n"
            f"–ö—É—Ä—Å: {from_profile['course']}\n"
            f"–û —Å–µ–±–µ: {from_profile['bio']}"
        )
        if from_profile.get("photo_id"):
            await bot.send_photo(
                chat_id=to_user_id,
                photo=from_profile["photo_id"],
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
        else:
            await bot.send_message(
                chat_id=to_user_id, text=caption, parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ: {e}")


async def send_match_notification(bot: Bot, user1_id: int, user2_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ (–º–∞—Ç—á–µ)"""
    from_profile = db.get_profile(user1_id)
    to_profile = db.get_profile(user2_id)
    if not from_profile or not to_profile:
        return
    try:
        text1 = (
            f"üéâ –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –º–∞—Ç—á —Å {to_profile['name']}!\n\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {to_profile['faculty']}\n–ö—É—Ä—Å: {to_profile['course']}\n–û —Å–µ–±–µ: {to_profile['bio']}"
        )
        text2 = (
            f"üéâ –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –º–∞—Ç—á —Å {from_profile['name']}!\n\n"
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {from_profile['faculty']}\n–ö—É—Ä—Å: {from_profile['course']}\n–û —Å–µ–±–µ: {from_profile['bio']}"
        )
        if to_profile.get('photo_id'):
            await bot.send_photo(user1_id, to_profile['photo_id'], caption=text1)
        else:
            await bot.send_message(user1_id, text1)
        if from_profile.get('photo_id'):
            await bot.send_photo(user2_id, from_profile['photo_id'], caption=text2)
        else:
            await bot.send_message(user2_id, text2)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ: {e}")


def get_match_keyboard(match_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ç—á–µ–π"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"message_{match_user_id}"
        ),
        InlineKeyboardButton(
            text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"match_{match_user_id}"
        ),
    )
    return builder.as_markup()


def get_support_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="START", url="https://t.me/avsPr09RaM1n9")],
        [
            InlineKeyboardButton(
                text="ü¶∏–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", url="https://t.me/avsPr09RaM1n9"
            )
        ],
        [InlineKeyboardButton(text="üëè–û—Ç–∑—ã–≤—ã", url="https://t.me/+Bog8x1i7ESA5ZmIy")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons, resize_keyboard=True)


def get_edit_profile_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–ò–º—è", callback_data="edit_name"),
        InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age"),
        InlineKeyboardButton(text="–ü–æ–ª", callback_data="edit_gender"),
    )
    builder.row(
        InlineKeyboardButton(text="–§–∞–∫—É–ª—å—Ç–µ—Ç", callback_data="edit_faculty"),
        InlineKeyboardButton(text="–ö—É—Ä—Å", callback_data="edit_course"),
    )
    builder.row(
        InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_bio"),
        InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="edit_photo"),
    )
    return builder.as_markup()
